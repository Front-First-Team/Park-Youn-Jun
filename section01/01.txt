리액트는 무엇인가?
사용자 인터페이스를 만들기 위한 javaScript 라이브러리

라이브러리란
자주 사용되는 기능들을 정리해 모아 놓은 것
문자열 관련 기능
숫자 관련 기능
날짜 관련 기능

사용자 인터페이스 (User Interface, UI)
사용자와 컴퓨터프로그램이 서로 상호작용하기 위해 중간에서 서로 간의 입력과 출력 제어

UI 라이브러리
사용자 인터페이스를 만들기 위한 기능 모음집

React는 대표적인 javaScript 라이브러리

React
Reactjs
Meta(facebook)에서 만든 오픈소스 javaScript UI 라이브러리

React 2013년 출시

프레임워크 VS 라이브러리
차이점
프로그램의 흐름에 대한 제어 권한

프레임워크
흐름에 제어 권한을 개발자가 아닌 프레임워크가 갖고 있음

라이브러리
흐름에 대한 제어를 갖지 않고 개발자가 필요한 부분만 필요할 때 갖고 사용하는 형태
제어 권한이 개발자가 있음

기술에 큰 흐름을 읽는 것이 중요

웹사이트의 작동 원리와 흐름을 함께 이해하는 것이 중요

React는 사용자와 웹사이트의 상호작용 돕는 인터페이스를 javaScript 기능 모음집
javaScript css html

SPA(Single Page Application) : 하나의 페이지만 존재하는 웹사이트 또는 웹 애플리케이션을 의미

규모가 큰 웹사이트 이것을 각각 html로 만드는 것은 비효율적임 관리하기 힘듦
하나의 html 만들고 놓고 사용자가 특정 페이지를 요청할 때 그 안에 해당 페이지의 내용 채워서 보내주는 것이 SPA

리액트의 장점과 단점 

리액트의 장점
빠른 업데이트와 랜더링 속도
여기 말하는 업데이트는 우리가 웹사이트를 탐색할 때 화면에 나타나는 내용이 바뀌는 것을 의미

React에서는 이런 빠른 업데이트를 위해 내부적으로 Virtual DOM이라는 것을 사용

Virtual DOM : 가상의 DOM, 웹페이지와 실제 DOM 사이에서 중간 매개체 역할 
DOM(Document Object Model) : 웹페이지를 정의하는 하나의 객체, 하나의 웹사이트에 대한 정보를 모두 담고 잇는 큰 그릇

화면이 업데이트된다는 말은 곹 DOM이 수정된다

React는 DOM을 직접 수정하는 것이 아니라 업데이트해야 최소한의 부분만을 찾아서 업데이트함

어떤 상태의 변경, 스테이트 체인지가 일어나면 Virtual DOM에서 업데이트해야 될 최소한의 부분을 검색 컴퓨트 딥 한다.
검색된 부분만을 업데이트하고 다시 랜터링하면서 변경된 내용을 빠르게 사용자에게 보여줄 수 있다

두번째 장점
Componment-Based
컴포넌트 기반의 구조

컴포넌트 : 구성요소
리액트에서는 모든 페이지가 컴포넌트로 구성되어 있음, 하나의 컴포넌트는 또 다른 여러 개의 컴포넌트의 조합으로 구성될 수 있음

컴포넌트를 조합해서 웹사이트를 개발하게 됨

컴포넌트 기반의 구조의 장점

재사용성 : 다시 사용이 가능한 성질
모든 소프트웨어가 곧바로 어떤 곳에서든 재사용이 가능하지 않음
의존성문제 호환성문제
소프트웨어가 개발할 때 재사용성이 높게 개발해야 된다 : 소프트웨어 또는 모듈이 다른 곳에도 쉽게 곧바로 쓸 수 있도록 개발하는 것
다른 모듈의 의존성을 낮추고 호환성 문제가 발생하지 않도록 개발해야 한다.

재사용성 장점
개발 기간이 단축됨
비슷한 소프트웨어를 개발한다고 할 때 기존에 개발해 둔 모듈을 곧바로 재사용하여 개발하면 되기 때문에 개발 기간 단축

유지 보수가 용이함
만약 여러 소프트웨어에서 공통으로 사용하는 모듈에 문제가 생기면 해당 모듈만 수정해서 다시 배포 가능
예상치 못한 버그를 마주치는 상황 빈번하게 발생하는데 재사용성이 높은 형태로 개발되어 있으면 좀 더 버그의 원인을 찾기 쉬움

리액트와 재사용성의 연관
리액트는 컴포넌트 기반의 구조
각 컴포넌트들은 웹사이트의 여러 곳에서 반복적으로 사용될 수 있음
하나의 컴포넌트가 계속해서 재사용될 수 있다는 말

리액트 컴포넌트를 개발할 때 항상 쉽고 재사용 가능한 형태 개발하는 게 중요 그렇게 하면 나중에 다른 웹사이트도 쉽고 빠르게 개발이 가능

활발한 지식 공유 & 커뮤니티
내가 모르는 것을 바로바로 찾아 볼 수 있다

리액트 네이티브라는 모바일 환경 UI 프레임웍을 사용해서 모바일 웹도 개발할 수 있음

리액트의 단점
방대한 학습량
Virtual DOM, JSX, Componment, State, Props 새로운 개념이 굉장히 많음
계속 바뀜
버전 업데이트가 이뤄지고 있어 새로운 내용들이 계속 나옴
새로운 버전이 나오면 이에 대한 내용을 학습하고 이해하고 있어야 실제 업무에서 원할하게 개발을 할 수가 있음\

높은 상태관리 복잡도
State라는 중요한 개념
State는 리액트 컴포넌트의 상태를 의미
Virtual DOM : 바뀐 부분만 찾아서 업데이트를 하는데 여기서 바뀐 부분이 State가 바뀐 컴포넌트를 의미
성능 최적화를 위해 State를 잘 관리하는 것이 중요 처음에 생각만큼 쉽지 않음
익숙해지더라도 웹사이트의 규모가 커져 컴포넌트의 개수가 많아지면 상태관리의 복잡도도 증가함

상태관리의 기본 개념을 제대로 이해하는 것이 중요